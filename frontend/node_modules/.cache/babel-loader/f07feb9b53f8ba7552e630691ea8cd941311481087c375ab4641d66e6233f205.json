{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jagdi\\\\Desktop\\\\ReactProject\\\\ElectronicsStore\\\\dariyalal_electronics\\\\src\\\\components\\\\Bill.js\",\n  _s = $RefreshSig$();\n// import './style.css';\n// import { useState, useEffect, useRef } from 'react';\n// import { fetchElectronicsData,addBill } from './API';\n// import { useNavigate, useParams } from 'react-router-dom';\n// function Bill(){\n//     const today = new Date();\n//     const year = today.getFullYear();\n//     const month = String(today.getMonth() + 1).padStart(2, '0');\n//     const day = String(today.getDate()).padStart(2, '0');\n//     const formattedDate = day + '-' + month + '-' + year;\n\n//     const [date, setDate] = useState('');\n//     const [CustomerName, setCustomerName] = useState('');\n\n//     const { No } = useParams();\n//     const [rows, setRows] = useState([\n//         {   No: No || '', \n//             Item: '', \n//             CostPrice: '', \n//             Quantity: '', \n//             SellPrice: '', \n//             Amount: '', \n//             Profit: '' \n//         }\n//     ]);\n\n//     const navigate=useNavigate();\n//     const firstSelectRef = useRef(null);\n\n//     const [arr, setArr] = useState([]);\n\n//     const customerNameInputRef = useRef(null);\n//     const quantityRef = useRef(null);\n\n//     useEffect(() => {\n//         fetchElectronicsData()\n//             .then(res => setArr(res));\n//         setDate(formattedDate);\n//         customerNameInputRef.current.focus();\n//     }, [formattedDate]);\n\n//     useEffect(() => {\n//         const handleKeyPress = (event) => {\n//             if (event.key === 'Enter' && document.activeElement === customerNameInputRef.current) {\n//                 event.preventDefault();\n//                 firstSelectRef.current.focus();\n//             }\n//         };\n//         window.addEventListener('keydown', handleKeyPress);\n//         return () => {\n//             window.removeEventListener('keydown', handleKeyPress);\n//         };\n//     }, []);\n\n//     const handleInputChange = (index, e) => {\n//         const { name, value } = e.target;\n//         const updatedRows = [...rows];\n//         updatedRows[index][name] = value;\n\n//         const quantity = updatedRows[index].Quantity || 0;\n//         const sellPrice = updatedRows[index].SellPrice || 0;\n//         const costPrice = updatedRows[index].CostPrice || 0;\n\n//         updatedRows[index].Amount = sellPrice * quantity;\n//         updatedRows[index].Profit = sellPrice - costPrice;\n\n//         setRows(updatedRows);\n//     };\n\n//     const handleItemChange = (index, e) => {\n//         const selectedItem = e.target.value;\n//         const selectedItemData = arr.find((item) => item.Item === selectedItem);\n\n//         if(selectedItemData){\n//             const updatedRows = [...rows];\n//             updatedRows[index].Item = selectedItem;\n//             updatedRows[index].CostPrice = selectedItemData.CostPrice;\n//             setRows(updatedRows);\n//         } \n//         else{\n//             console.warn(\"Invalid item selected\");\n//         }\n//     };\n\n//     const addRow = () => {\n//         if (allFieldsFilled()) {\n//             setRows([...rows, { Item: '', \n//                                 CostPrice: '', \n//                                 Quantity: '', \n//                                 SellPrice: '', \n//                                 Amount: '', \n//                                 Profit: '', \n//                                 isInvalid: false \n//                             }\n//                     ]);\n//         }\n//         else {\n//             const updatedRows = [...rows];\n//             updatedRows[rows.length - 1].isInvalid = true;\n//             setRows(updatedRows);\n//         }\n//     };\n\n//     const handleDeleteRow = (index) => {\n//         const updatedRows = rows.filter((_, i) => i !== index);\n//         setRows(updatedRows);\n//     };\n\n//     useEffect(() => {\n//         const handleKeyPress = (event) => {\n//             if (event.key === 'Enter') {\n//                 event.preventDefault();\n//                 addRow();\n//             }\n//         };\n//         window.addEventListener('keydown', handleKeyPress);\n//         return () => {\n//             window.removeEventListener('keydown', handleKeyPress);\n//         };\n//     }, []);\n\n//     const allFieldsFilled = () => {\n//         const lastRow = rows[rows.length - 1];\n//         return lastRow.Item && lastRow.Quantity && lastRow.SellPrice;\n//     };\n\n//     const isLastRowInvalid = !allFieldsFilled();\n\n//     const totalQuantity = rows.reduce((acc, row) => acc + (parseInt(row.Quantity) || 0), 0);\n//     const totalAmount = rows.reduce((acc, row) => acc + (parseFloat(row.Amount) || 0), 0);\n//     const totalProfit = rows.reduce((acc, row) => acc + (parseFloat(row.Profit) || 0), 0);\n\n//     const saveBill = async () => {\n//         if (CustomerName && totalAmount > 0) {\n//             const validItems = rows.filter(row => row.Item && row.Quantity && row.SellPrice);\n//             if (validItems.length === 0) {\n//                 alert(\"Please add at least one valid item.\");\n//                 return;\n//             }\n//             const ItemNames = validItems.map(row => row.Item);\n//             const Quantities = validItems.map(row => row.Quantity);\n//             const Price = validItems.map(row => row.SellPrice);\n\n//             const billData = { \n//                 No,\n//                 date, \n//                 CustomerName, \n//                 ItemNames, \n//                 Quantities, \n//                 Price,\n//                 Amount: parseFloat(totalAmount) \n//             };\n//             addBill(billData, navigate);\n//         }\n//         else{\n//             alert(\"Please fill in the customer name and ensure the bill has at least one valid item.\");\n//         }\n//     };\n\n//     return(            \n//         <>\n//             <h1 className='text-center m-4' style={{fontSize:\"50px\"}}>Bill</h1>\n//             <div className='container-fluid px-4'>\n//                 <div className='row my-3'>\n//                     <div className='col'>Date: \n//                         <span className='fw-bold fst-italic'>{formattedDate}</span>\n//                     </div>\n//                 </div>\n//                 <div className='row offset-lg-2 my-3 fs-5'>\n//                     <div className='col-lg-6 d-flex align-items-center'>\n//                         Customer Name: \n//                             <span className='ms-2'>\n//                                 <input \n//                                     type=\"text\" \n//                                     ref={customerNameInputRef}\n//                                     className=\"form-control\" \n//                                     value={CustomerName}\n//                                     onChange={(e) => setCustomerName(e.target.value)} \n//                                 />\n//                             </span>\n//                     </div>\n//                 </div>\n//                 <div className='row'>\n//                     <div className='col table-responsive'>\n//                         <table className='table table-striped table-bordered text-center'>\n//                             <thead>\n//                                 <tr>\n//                                     <th style={{ width: \"3vw\" }}>No.</th>\n//                                     <th style={{ width: \"29vw\" }}>Item</th>\n//                                     <th style={{ width: \"10vw\" }}>Cost Price</th>\n//                                     <th style={{ width: \"5vw\" }}>Quantity</th>\n//                                     <th style={{ width: \"10vw\" }}>Sell Price</th>\n//                                     <th style={{ width: \"15vw\" }}>Amount</th>\n//                                     <th style={{ width: \"15vw\" }}>Profit</th>\n//                                     <th style={{ width: \"5vw\" }}>Action</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className='align-middle'>\n//                                 {rows.map((row, index) => (\n//                                     <tr key={row.No + '-' + index}>\n//                                         <td>\n//                                             {index + 1}\n//                                         </td>\n//                                         <td>\n//                                             <select\n//                                                 ref={index === 0 ? firstSelectRef : null}\n//                                                 style={{ width: \"100%\" }}\n//                                                 value={row.Item}\n//                                                 onChange={(e) => handleItemChange(index, e)}\n//                                                 className={'p-2 bg-light ' + (row.isInvalid && !row.Item ? \"invalid_input\" : \"\")}\n//                                                 role=\"button\"\n//                                             >\n//                                                 <option value=''>Select any item!</option>\n//                                                 {arr.map((item,idx) => (\n//                                                     <option key={idx} value={item.Item}>\n//                                                         {item.Item}\n//                                                     </option>\n//                                                 ))}\n//                                             </select>\n//                                         </td>\n//                                         <td>\n//                                             {row.CostPrice}\n//                                         </td>\n//                                         <td>\n//                                             <input\n//                                                 type='number'\n//                                                 name='Quantity'\n//                                                 value={row.Quantity}\n//                                                 onChange={(e) => handleInputChange(index, e)}\n//                                                 className={'form-control ' + (row.isInvalid && !row.Quantity ? \"invalid-input\" : \"\")}\n//                                             />\n//                                         </td>\n//                                         <td>\n//                                             <input\n//                                                 type='number'\n//                                                 name='SellPrice'\n//                                                 value={row.SellPrice}\n//                                                 onChange={(e) => handleInputChange(index, e)}\n//                                                 className={'form-control ' + (row.isInvalid && !row.SellPrice ? \"invalid-input\" : \"\")}\n//                                             />\n//                                         </td>\n//                                         <td>\n//                                             {row.Amount}\n//                                         </td>\n//                                         <td>\n//                                             {row.Profit}\n//                                         </td>\n//                                         <td>\n//                                             <button className='btn btn-danger' onClick={() => handleDeleteRow(index)}>Delete</button>\n//                                         </td>\n//                                     </tr>\n//                                 ))}\n//                                 <tr className='fs-5 text-center'>\n//                                     <td colSpan=\"3\" className='text-start px-3'><strong>Total:</strong></td>\n//                                     <td><strong>{totalQuantity}</strong></td>\n//                                     <td></td>\n//                                     <td><strong>{totalAmount.toFixed(2)}</strong></td>\n//                                     <td><strong>{totalProfit.toFixed(2)}</strong></td>\n//                                     <td></td>\n//                                 </tr>\n//                             </tbody>\n//                         </table>\n//                     </div>\n//                 </div>\n//                 <div className='row'>\n//                     <div className='col text-center'>\n//                         <button className='btn btn-primary' onClick={addRow} disabled={isLastRowInvalid}>\n//                             Add New Row\n//                         </button>\n//                     </div>\n//                 </div>\n//                 <div className='row'>\n//                     <div className='col text-end my-3'>\n//                         <button \n//                             className='btn btn-success btn-lg' \n//                             disabled={isLastRowInvalid} \n//                             onClick={saveBill}\n//                         >Save\n//                         </button>\n//                     </div>\n//                 </div>\n//             </div>\n//         </>\n//     );\n// };\n\n// export default Bill;\n\nimport './style.css';\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport { fetchElectronicsData, addBill } from './API';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Bill() {\n  _s();\n  const today = new Date();\n  const formattedDate = today.toLocaleDateString('en-GB'); // Format: DD-MM-YYYY\n\n  const {\n    No\n  } = useParams();\n  const [date, setDate] = useState(formattedDate);\n  const [CustomerName, setCustomerName] = useState('');\n  const [rows, setRows] = useState([{\n    No: No || '',\n    Item: '',\n    CostPrice: '',\n    Quantity: '',\n    SellPrice: '',\n    Amount: '',\n    Profit: ''\n  }]);\n  const [arr, setArr] = useState([]);\n  const navigate = useNavigate();\n  const firstSelectRef = useRef(null);\n  const customerNameInputRef = useRef(null);\n  useEffect(() => {\n    fetchElectronicsData().then(setArr);\n    customerNameInputRef.current.focus();\n  }, []);\n  const handleInputChange = (index, e) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedRows = [...rows];\n    updatedRows[index][name] = value;\n    const quantity = parseFloat(updatedRows[index].Quantity) || 0;\n    const sellPrice = parseFloat(updatedRows[index].SellPrice) || 0;\n    const costPrice = parseFloat(updatedRows[index].CostPrice) || 0;\n    updatedRows[index].Amount = sellPrice * quantity;\n    updatedRows[index].Profit = sellPrice - costPrice;\n    setRows(updatedRows);\n  };\n  const handleItemChange = (index, e) => {\n    const selectedItem = e.target.value;\n    const selectedItemData = arr.find(item => item.Item === selectedItem);\n    if (selectedItemData) {\n      const updatedRows = [...rows];\n      updatedRows[index] = {\n        ...updatedRows[index],\n        Item: selectedItem,\n        CostPrice: selectedItemData.CostPrice\n      };\n      setRows(updatedRows);\n    } else {\n      console.warn(\"Invalid item selected\");\n    }\n  };\n  const addRow = () => {\n    if (allFieldsFilled()) {\n      setRows([...rows, {\n        Item: '',\n        CostPrice: '',\n        Quantity: '',\n        SellPrice: '',\n        Amount: '',\n        Profit: ''\n      }]);\n    } else {\n      const updatedRows = [...rows];\n      updatedRows[rows.length - 1].isInvalid = true;\n      setRows(updatedRows);\n    }\n  };\n  const handleDeleteRow = index => {\n    setRows(rows.filter((_, i) => i !== index));\n  };\n  const totalQuantity = useMemo(() => rows.reduce((acc, row) => acc + (parseInt(row.Quantity) || 0), 0), [rows]);\n  const totalAmount = useMemo(() => rows.reduce((acc, row) => acc + (parseFloat(row.Amount) || 0), 0), [rows]);\n  const totalProfit = useMemo(() => rows.reduce((acc, row) => acc + (parseFloat(row.Profit) || 0), 0), [rows]);\n  const saveBill = async () => {\n    if (CustomerName && totalAmount > 0) {\n      const validItems = rows.filter(row => row.Item && row.Quantity && row.SellPrice);\n      if (validItems.length === 0) {\n        alert(\"Please add at least one valid item.\");\n        return;\n      }\n      const ItemNames = validItems.map(row => row.Item);\n      const Quantities = validItems.map(row => row.Quantity);\n      const Price = validItems.map(row => row.SellPrice);\n      const billData = {\n        No,\n        date,\n        CustomerName,\n        ItemNames,\n        Quantities,\n        Price,\n        Amount: parseFloat(totalAmount)\n      };\n      await addBill(billData, navigate);\n    } else {\n      alert(\"Please fill in the customer name and ensure the bill has at least one valid item.\");\n    }\n  };\n  const allFieldsFilled = () => {\n    const lastRow = rows[rows.length - 1];\n    return lastRow.Item && lastRow.Quantity && lastRow.SellPrice;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center m-4\",\n      style: {\n        fontSize: \"50px\"\n      },\n      children: \"Bill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid px-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row my-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [\"Date: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fst-italic\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row offset-lg-2 my-3 fs-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 d-flex align-items-center\",\n          children: [\"Customer Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            ref: customerNameInputRef,\n            className: \"form-control ms-2\",\n            value: CustomerName,\n            onChange: e => setCustomerName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col table-responsive\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-striped table-bordered text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  style: {\n                    width: \"3vw\"\n                  },\n                  children: \"No.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  style: {\n                    width: \"29vw\"\n                  },\n                  children: \"Item\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  style: {\n                    width: \"10vw\"\n                  },\n                  children: \"Cost Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  style: {\n                    width: \"5vw\"\n                  },\n                  children: \"Quantity\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  style: {\n                    width: \"10vw\"\n                  },\n                  children: \"Sell Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  style: {\n                    width: \"15vw\"\n                  },\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  style: {\n                    width: \"15vw\"\n                  },\n                  children: \"Profit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  style: {\n                    width: \"5vw\"\n                  },\n                  children: \"Action\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              className: \"align-middle\",\n              children: [rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: index + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"select\", {\n                    ref: index === 0 ? firstSelectRef : null,\n                    style: {\n                      width: \"100%\"\n                    },\n                    value: row.Item,\n                    onChange: e => handleItemChange(index, e),\n                    className: 'p-2 bg-light ' + (row.isInvalid && !row.Item ? \"invalid-input\" : \"\"),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"Select any item!\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 428,\n                      columnNumber: 49\n                    }, this), arr.map((item, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: item.Item,\n                      children: item.Item\n                    }, idx, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 430,\n                      columnNumber: 53\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: row.CostPrice\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 434,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    name: \"Quantity\",\n                    value: row.Quantity,\n                    onChange: e => handleInputChange(index, e),\n                    className: 'form-control ' + (row.isInvalid && !row.Quantity ? \"invalid-input\" : \"\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 436,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    name: \"SellPrice\",\n                    value: row.SellPrice,\n                    onChange: e => handleInputChange(index, e),\n                    className: 'form-control ' + (row.isInvalid && !row.SellPrice ? \"invalid-input\" : \"\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 445,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: row.Amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 453,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: row.Profit\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-danger\",\n                    onClick: () => handleDeleteRow(index),\n                    children: \"Delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 456,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 41\n                }, this)]\n              }, `${row.No}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 37\n              }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"fs-5 text-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: \"3\",\n                  className: \"text-start px-3\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 461,\n                    columnNumber: 81\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 461,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: totalQuantity\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 462,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 462,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: totalAmount.toFixed(2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 464,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: totalProfit.toFixed(2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 465,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: addRow,\n            disabled: !allFieldsFilled(),\n            children: \"Add New Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col text-end my-3\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success btn-lg\",\n            onClick: saveBill,\n            disabled: !allFieldsFilled(),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Bill, \"bCGyue2tqgzKfy80/t//z6jLkOE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Bill;\n;\nexport default Bill;\nvar _c;\n$RefreshReg$(_c, \"Bill\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","fetchElectronicsData","addBill","useNavigate","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","Bill","_s","today","Date","formattedDate","toLocaleDateString","No","date","setDate","CustomerName","setCustomerName","rows","setRows","Item","CostPrice","Quantity","SellPrice","Amount","Profit","arr","setArr","navigate","firstSelectRef","customerNameInputRef","then","current","focus","handleInputChange","index","e","name","value","target","updatedRows","quantity","parseFloat","sellPrice","costPrice","handleItemChange","selectedItem","selectedItemData","find","item","console","warn","addRow","allFieldsFilled","length","isInvalid","handleDeleteRow","filter","_","i","totalQuantity","reduce","acc","row","parseInt","totalAmount","totalProfit","saveBill","validItems","alert","ItemNames","map","Quantities","Price","billData","lastRow","children","className","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","width","idx","onClick","colSpan","toFixed","disabled","_c","$RefreshReg$"],"sources":["C:/Users/jagdi/Desktop/ReactProject/ElectronicsStore/dariyalal_electronics/src/components/Bill.js"],"sourcesContent":["// import './style.css';\r\n// import { useState, useEffect, useRef } from 'react';\r\n// import { fetchElectronicsData,addBill } from './API';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// function Bill(){\r\n//     const today = new Date();\r\n//     const year = today.getFullYear();\r\n//     const month = String(today.getMonth() + 1).padStart(2, '0');\r\n//     const day = String(today.getDate()).padStart(2, '0');\r\n//     const formattedDate = day + '-' + month + '-' + year;\r\n\r\n//     const [date, setDate] = useState('');\r\n//     const [CustomerName, setCustomerName] = useState('');\r\n\r\n//     const { No } = useParams();\r\n//     const [rows, setRows] = useState([\r\n//         {   No: No || '', \r\n//             Item: '', \r\n//             CostPrice: '', \r\n//             Quantity: '', \r\n//             SellPrice: '', \r\n//             Amount: '', \r\n//             Profit: '' \r\n//         }\r\n//     ]);\r\n\r\n//     const navigate=useNavigate();\r\n//     const firstSelectRef = useRef(null);\r\n\r\n//     const [arr, setArr] = useState([]);\r\n\r\n//     const customerNameInputRef = useRef(null);\r\n//     const quantityRef = useRef(null);\r\n\r\n//     useEffect(() => {\r\n//         fetchElectronicsData()\r\n//             .then(res => setArr(res));\r\n//         setDate(formattedDate);\r\n//         customerNameInputRef.current.focus();\r\n//     }, [formattedDate]);\r\n\r\n//     useEffect(() => {\r\n//         const handleKeyPress = (event) => {\r\n//             if (event.key === 'Enter' && document.activeElement === customerNameInputRef.current) {\r\n//                 event.preventDefault();\r\n//                 firstSelectRef.current.focus();\r\n//             }\r\n//         };\r\n//         window.addEventListener('keydown', handleKeyPress);\r\n//         return () => {\r\n//             window.removeEventListener('keydown', handleKeyPress);\r\n//         };\r\n//     }, []);\r\n\r\n//     const handleInputChange = (index, e) => {\r\n//         const { name, value } = e.target;\r\n//         const updatedRows = [...rows];\r\n//         updatedRows[index][name] = value;\r\n\r\n//         const quantity = updatedRows[index].Quantity || 0;\r\n//         const sellPrice = updatedRows[index].SellPrice || 0;\r\n//         const costPrice = updatedRows[index].CostPrice || 0;\r\n\r\n//         updatedRows[index].Amount = sellPrice * quantity;\r\n//         updatedRows[index].Profit = sellPrice - costPrice;\r\n\r\n//         setRows(updatedRows);\r\n//     };\r\n\r\n//     const handleItemChange = (index, e) => {\r\n//         const selectedItem = e.target.value;\r\n//         const selectedItemData = arr.find((item) => item.Item === selectedItem);\r\n    \r\n//         if(selectedItemData){\r\n//             const updatedRows = [...rows];\r\n//             updatedRows[index].Item = selectedItem;\r\n//             updatedRows[index].CostPrice = selectedItemData.CostPrice;\r\n//             setRows(updatedRows);\r\n//         } \r\n//         else{\r\n//             console.warn(\"Invalid item selected\");\r\n//         }\r\n//     };\r\n    \r\n//     const addRow = () => {\r\n//         if (allFieldsFilled()) {\r\n//             setRows([...rows, { Item: '', \r\n//                                 CostPrice: '', \r\n//                                 Quantity: '', \r\n//                                 SellPrice: '', \r\n//                                 Amount: '', \r\n//                                 Profit: '', \r\n//                                 isInvalid: false \r\n//                             }\r\n//                     ]);\r\n//         }\r\n//         else {\r\n//             const updatedRows = [...rows];\r\n//             updatedRows[rows.length - 1].isInvalid = true;\r\n//             setRows(updatedRows);\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteRow = (index) => {\r\n//         const updatedRows = rows.filter((_, i) => i !== index);\r\n//         setRows(updatedRows);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const handleKeyPress = (event) => {\r\n//             if (event.key === 'Enter') {\r\n//                 event.preventDefault();\r\n//                 addRow();\r\n//             }\r\n//         };\r\n//         window.addEventListener('keydown', handleKeyPress);\r\n//         return () => {\r\n//             window.removeEventListener('keydown', handleKeyPress);\r\n//         };\r\n//     }, []);\r\n\r\n//     const allFieldsFilled = () => {\r\n//         const lastRow = rows[rows.length - 1];\r\n//         return lastRow.Item && lastRow.Quantity && lastRow.SellPrice;\r\n//     };\r\n\r\n//     const isLastRowInvalid = !allFieldsFilled();\r\n\r\n//     const totalQuantity = rows.reduce((acc, row) => acc + (parseInt(row.Quantity) || 0), 0);\r\n//     const totalAmount = rows.reduce((acc, row) => acc + (parseFloat(row.Amount) || 0), 0);\r\n//     const totalProfit = rows.reduce((acc, row) => acc + (parseFloat(row.Profit) || 0), 0);\r\n    \r\n//     const saveBill = async () => {\r\n//         if (CustomerName && totalAmount > 0) {\r\n//             const validItems = rows.filter(row => row.Item && row.Quantity && row.SellPrice);\r\n//             if (validItems.length === 0) {\r\n//                 alert(\"Please add at least one valid item.\");\r\n//                 return;\r\n//             }\r\n//             const ItemNames = validItems.map(row => row.Item);\r\n//             const Quantities = validItems.map(row => row.Quantity);\r\n//             const Price = validItems.map(row => row.SellPrice);\r\n    \r\n//             const billData = { \r\n//                 No,\r\n//                 date, \r\n//                 CustomerName, \r\n//                 ItemNames, \r\n//                 Quantities, \r\n//                 Price,\r\n//                 Amount: parseFloat(totalAmount) \r\n//             };\r\n//             addBill(billData, navigate);\r\n//         }\r\n//         else{\r\n//             alert(\"Please fill in the customer name and ensure the bill has at least one valid item.\");\r\n//         }\r\n//     };\r\n    \r\n\r\n//     return(            \r\n//         <>\r\n//             <h1 className='text-center m-4' style={{fontSize:\"50px\"}}>Bill</h1>\r\n//             <div className='container-fluid px-4'>\r\n//                 <div className='row my-3'>\r\n//                     <div className='col'>Date: \r\n//                         <span className='fw-bold fst-italic'>{formattedDate}</span>\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className='row offset-lg-2 my-3 fs-5'>\r\n//                     <div className='col-lg-6 d-flex align-items-center'>\r\n//                         Customer Name: \r\n//                             <span className='ms-2'>\r\n//                                 <input \r\n//                                     type=\"text\" \r\n//                                     ref={customerNameInputRef}\r\n//                                     className=\"form-control\" \r\n//                                     value={CustomerName}\r\n//                                     onChange={(e) => setCustomerName(e.target.value)} \r\n//                                 />\r\n//                             </span>\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className='row'>\r\n//                     <div className='col table-responsive'>\r\n//                         <table className='table table-striped table-bordered text-center'>\r\n//                             <thead>\r\n//                                 <tr>\r\n//                                     <th style={{ width: \"3vw\" }}>No.</th>\r\n//                                     <th style={{ width: \"29vw\" }}>Item</th>\r\n//                                     <th style={{ width: \"10vw\" }}>Cost Price</th>\r\n//                                     <th style={{ width: \"5vw\" }}>Quantity</th>\r\n//                                     <th style={{ width: \"10vw\" }}>Sell Price</th>\r\n//                                     <th style={{ width: \"15vw\" }}>Amount</th>\r\n//                                     <th style={{ width: \"15vw\" }}>Profit</th>\r\n//                                     <th style={{ width: \"5vw\" }}>Action</th>\r\n//                                 </tr>\r\n//                             </thead>\r\n//                             <tbody className='align-middle'>\r\n//                                 {rows.map((row, index) => (\r\n//                                     <tr key={row.No + '-' + index}>\r\n//                                         <td>\r\n//                                             {index + 1}\r\n//                                         </td>\r\n//                                         <td>\r\n//                                             <select\r\n//                                                 ref={index === 0 ? firstSelectRef : null}\r\n//                                                 style={{ width: \"100%\" }}\r\n//                                                 value={row.Item}\r\n//                                                 onChange={(e) => handleItemChange(index, e)}\r\n//                                                 className={'p-2 bg-light ' + (row.isInvalid && !row.Item ? \"invalid_input\" : \"\")}\r\n//                                                 role=\"button\"\r\n//                                             >\r\n//                                                 <option value=''>Select any item!</option>\r\n//                                                 {arr.map((item,idx) => (\r\n//                                                     <option key={idx} value={item.Item}>\r\n//                                                         {item.Item}\r\n//                                                     </option>\r\n//                                                 ))}\r\n//                                             </select>\r\n//                                         </td>\r\n//                                         <td>\r\n//                                             {row.CostPrice}\r\n//                                         </td>\r\n//                                         <td>\r\n//                                             <input\r\n//                                                 type='number'\r\n//                                                 name='Quantity'\r\n//                                                 value={row.Quantity}\r\n//                                                 onChange={(e) => handleInputChange(index, e)}\r\n//                                                 className={'form-control ' + (row.isInvalid && !row.Quantity ? \"invalid-input\" : \"\")}\r\n//                                             />\r\n//                                         </td>\r\n//                                         <td>\r\n//                                             <input\r\n//                                                 type='number'\r\n//                                                 name='SellPrice'\r\n//                                                 value={row.SellPrice}\r\n//                                                 onChange={(e) => handleInputChange(index, e)}\r\n//                                                 className={'form-control ' + (row.isInvalid && !row.SellPrice ? \"invalid-input\" : \"\")}\r\n//                                             />\r\n//                                         </td>\r\n//                                         <td>\r\n//                                             {row.Amount}\r\n//                                         </td>\r\n//                                         <td>\r\n//                                             {row.Profit}\r\n//                                         </td>\r\n//                                         <td>\r\n//                                             <button className='btn btn-danger' onClick={() => handleDeleteRow(index)}>Delete</button>\r\n//                                         </td>\r\n//                                     </tr>\r\n//                                 ))}\r\n//                                 <tr className='fs-5 text-center'>\r\n//                                     <td colSpan=\"3\" className='text-start px-3'><strong>Total:</strong></td>\r\n//                                     <td><strong>{totalQuantity}</strong></td>\r\n//                                     <td></td>\r\n//                                     <td><strong>{totalAmount.toFixed(2)}</strong></td>\r\n//                                     <td><strong>{totalProfit.toFixed(2)}</strong></td>\r\n//                                     <td></td>\r\n//                                 </tr>\r\n//                             </tbody>\r\n//                         </table>\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className='row'>\r\n//                     <div className='col text-center'>\r\n//                         <button className='btn btn-primary' onClick={addRow} disabled={isLastRowInvalid}>\r\n//                             Add New Row\r\n//                         </button>\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className='row'>\r\n//                     <div className='col text-end my-3'>\r\n//                         <button \r\n//                             className='btn btn-success btn-lg' \r\n//                             disabled={isLastRowInvalid} \r\n//                             onClick={saveBill}\r\n//                         >Save\r\n//                         </button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default Bill;\r\n\r\nimport './style.css';\r\nimport { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { fetchElectronicsData, addBill } from './API';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nfunction Bill() {\r\n    const today = new Date();\r\n    const formattedDate = today.toLocaleDateString('en-GB'); // Format: DD-MM-YYYY\r\n\r\n    const { No } = useParams();\r\n    const [date, setDate] = useState(formattedDate);\r\n    const [CustomerName, setCustomerName] = useState('');\r\n    const [rows, setRows] = useState([{ No: No || '', Item: '', CostPrice: '', Quantity: '', SellPrice: '', Amount: '', Profit: '' }]);\r\n    const [arr, setArr] = useState([]);\r\n    const navigate = useNavigate();\r\n    const firstSelectRef = useRef(null);\r\n    const customerNameInputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        fetchElectronicsData().then(setArr);\r\n        customerNameInputRef.current.focus();\r\n    }, []);\r\n\r\n    const handleInputChange = (index, e) => {\r\n        const { name, value } = e.target;\r\n        const updatedRows = [...rows];\r\n        updatedRows[index][name] = value;\r\n\r\n        const quantity = parseFloat(updatedRows[index].Quantity) || 0;\r\n        const sellPrice = parseFloat(updatedRows[index].SellPrice) || 0;\r\n        const costPrice = parseFloat(updatedRows[index].CostPrice) || 0;\r\n\r\n        updatedRows[index].Amount = sellPrice * quantity;\r\n        updatedRows[index].Profit = sellPrice - costPrice;\r\n\r\n        setRows(updatedRows);\r\n    };\r\n\r\n    const handleItemChange = (index, e) => {\r\n        const selectedItem = e.target.value;\r\n        const selectedItemData = arr.find(item => item.Item === selectedItem);\r\n    \r\n        if (selectedItemData) {\r\n            const updatedRows = [...rows];\r\n            updatedRows[index] = { ...updatedRows[index], Item: selectedItem, CostPrice: selectedItemData.CostPrice };\r\n            setRows(updatedRows);\r\n        } else {\r\n            console.warn(\"Invalid item selected\");\r\n        }\r\n    };\r\n\r\n    const addRow = () => {\r\n        if (allFieldsFilled()) {\r\n            setRows([...rows, { Item: '', CostPrice: '', Quantity: '', SellPrice: '', Amount: '', Profit: '' }]);\r\n        } else {\r\n            const updatedRows = [...rows];\r\n            updatedRows[rows.length - 1].isInvalid = true;\r\n            setRows(updatedRows);\r\n        }\r\n    };\r\n\r\n    const handleDeleteRow = (index) => {\r\n        setRows(rows.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const totalQuantity = useMemo(() => rows.reduce((acc, row) => acc + (parseInt(row.Quantity) || 0), 0), [rows]);\r\n    const totalAmount = useMemo(() => rows.reduce((acc, row) => acc + (parseFloat(row.Amount) || 0), 0), [rows]);\r\n    const totalProfit = useMemo(() => rows.reduce((acc, row) => acc + (parseFloat(row.Profit) || 0), 0), [rows]);\r\n\r\n    const saveBill = async () => {\r\n        if (CustomerName && totalAmount > 0) {\r\n            const validItems = rows.filter(row => row.Item && row.Quantity && row.SellPrice);\r\n            if (validItems.length === 0) {\r\n                alert(\"Please add at least one valid item.\");\r\n                return;\r\n            }\r\n            const ItemNames = validItems.map(row => row.Item);\r\n            const Quantities = validItems.map(row => row.Quantity);\r\n            const Price = validItems.map(row => row.SellPrice);\r\n    \r\n            const billData = { No, date, CustomerName, ItemNames, Quantities, Price, Amount: parseFloat(totalAmount) };\r\n            await addBill(billData, navigate);\r\n        } else {\r\n            alert(\"Please fill in the customer name and ensure the bill has at least one valid item.\");\r\n        }\r\n    };\r\n\r\n    const allFieldsFilled = () => {\r\n        const lastRow = rows[rows.length - 1];\r\n        return lastRow.Item && lastRow.Quantity && lastRow.SellPrice;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1 className='text-center m-4' style={{ fontSize: \"50px\" }}>Bill</h1>\r\n            <div className='container-fluid px-4'>\r\n                <div className='row my-3'>\r\n                    <div className='col'>Date: <span className='fw-bold fst-italic'>{formattedDate}</span></div>\r\n                </div>\r\n                <div className='row offset-lg-2 my-3 fs-5'>\r\n                    <div className='col-lg-6 d-flex align-items-center'>\r\n                        Customer Name:\r\n                        <input \r\n                            type=\"text\" \r\n                            ref={customerNameInputRef}\r\n                            className=\"form-control ms-2\" \r\n                            value={CustomerName}\r\n                            onChange={(e) => setCustomerName(e.target.value)} \r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col table-responsive'>\r\n                        <table className='table table-striped table-bordered text-center'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th style={{ width: \"3vw\" }}>No.</th>\r\n                                    <th style={{ width: \"29vw\" }}>Item</th>\r\n                                    <th style={{ width: \"10vw\" }}>Cost Price</th>\r\n                                    <th style={{ width: \"5vw\" }}>Quantity</th>\r\n                                    <th style={{ width: \"10vw\" }}>Sell Price</th>\r\n                                    <th style={{ width: \"15vw\" }}>Amount</th>\r\n                                    <th style={{ width: \"15vw\" }}>Profit</th>\r\n                                    <th style={{ width: \"5vw\" }}>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className='align-middle'>\r\n                                {rows.map((row, index) => (\r\n                                    <tr key={`${row.No}-${index}`}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>\r\n                                            <select\r\n                                                ref={index === 0 ? firstSelectRef : null}\r\n                                                style={{ width: \"100%\" }}\r\n                                                value={row.Item}\r\n                                                onChange={(e) => handleItemChange(index, e)}\r\n                                                className={'p-2 bg-light ' + (row.isInvalid && !row.Item ? \"invalid-input\" : \"\")}\r\n                                            >\r\n                                                <option value=''>Select any item!</option>\r\n                                                {arr.map((item, idx) => (\r\n                                                    <option key={idx} value={item.Item}>{item.Item}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </td>\r\n                                        <td>{row.CostPrice}</td>\r\n                                        <td>\r\n                                            <input\r\n                                                type='number'\r\n                                                name='Quantity'\r\n                                                value={row.Quantity}\r\n                                                onChange={(e) => handleInputChange(index, e)}\r\n                                                className={'form-control ' + (row.isInvalid && !row.Quantity ? \"invalid-input\" : \"\")}\r\n                                            />\r\n                                        </td>\r\n                                        <td>\r\n                                            <input\r\n                                                type='number'\r\n                                                name='SellPrice'\r\n                                                value={row.SellPrice}\r\n                                                onChange={(e) => handleInputChange(index, e)}\r\n                                                className={'form-control ' + (row.isInvalid && !row.SellPrice ? \"invalid-input\" : \"\")}\r\n                                            />\r\n                                        </td>\r\n                                        <td>{row.Amount}</td>\r\n                                        <td>{row.Profit}</td>\r\n                                        <td>\r\n                                            <button className='btn btn-danger' onClick={() => handleDeleteRow(index)}>Delete</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                                <tr className='fs-5 text-center'>\r\n                                    <td colSpan=\"3\" className='text-start px-3'><strong>Total:</strong></td>\r\n                                    <td><strong>{totalQuantity}</strong></td>\r\n                                    <td></td>\r\n                                    <td><strong>{totalAmount.toFixed(2)}</strong></td>\r\n                                    <td><strong>{totalProfit.toFixed(2)}</strong></td>\r\n                                    <td></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col text-center'>\r\n                        <button className='btn btn-primary' onClick={addRow} disabled={!allFieldsFilled()}>\r\n                            Add New Row\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col text-end my-3'>\r\n                        <button \r\n                            className='btn btn-success btn-lg' \r\n                            onClick={saveBill}\r\n                            disabled={!allFieldsFilled()}\r\n                        >\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Bill;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}